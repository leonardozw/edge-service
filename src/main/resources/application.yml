server:
    port: 9000
    netty:
        connection-timeout: 2s
        idle-timeout: 15s
    shutdown: graceful

spring:
    application:
        name: edge-service
    lifecycle:
        timeout-per-shutdown-phase: 15s
    security:
      oauth2:
        client:
          registration:
            keycloak:
              client-id: edge-service
              client-secret: polar-keycloak-secret
              scope: openid
          provider:
            keycloak:
              issuer-uri: http://localhost:8080/realms/PolarBookshop
    cloud:
        gateway:
            default-filters:
                - SaveSession
                - name: RequestRateLimiter
                  args:
                    redis-rate-limiter:
                        replenishRate: 10 # Number of tokens to be added to the bucket per second.
                        burstCapacity: 20 # Maximum number of tokens that can be stored in the bucket.
                        requestedTokens: 1 # Number of tokens to consume for each request.
                - name: Retry
                  args:
                    retries: 3
                    methods: GET
                    series: SERVER_ERROR # 5xx errors
                    exceptions: java.io.IOException, java.util.concurrent.TimeoutException # Exceptions to retry
                    backoff: # Backoff parameters, firstBackoff is the default backoff for all exceptions
                        first-backoff: 50ms
                        max-backoff: 500ms
                        factor: 2
                        based-on-previous-value: false # If true, changes the backoff to prevBackoff
            httpClient:
                connect-timeout: 2000
                response-timeout: 5s
                pool:
                    type: elastic # Type of the connection pool. Can be 'fixed' or 'elastic'.
                    max-idle-time: 15s # Max idle time for a connection. After this time, the connection will be closed.
                    max-life-time: 60s # Time after which the communication channel will be closed regardless of whether it is used or not.
            routes:
                - id: spa-route
                  uri: ${SPA_URL:http://localhost:9004}
                  predicates:
                    - Path=/,/*.css,/*.js,/favicon.ico
                - id: catalog-route
                  uri: ${CATALOG_SERVICE_URI:http://localhost:9001}/books
                  predicates:
                    - Path=/books/**
                  filters:
                    - name: CircuitBreaker
                      args:
                        name: catalogCircuitBreaker
                        fallbackUri: forward:/catalog-fallback
                - id: order-route
                  uri: ${ORDER_SERVICE_URI:http://localhost:9002}/orders
                  predicates:
                    - Path=/orders/**
                  filters:
                    - name: CircuitBreaker
                      args:
                        name: orderCircuitBreaker
    data:
        redis:
            connect-timeout: 2s
            host: localhost
            port: 6379
            timeout: 1s
    session:
        store-type: redis
        timeout: 10m
        redis:
            namespace: polar:edge

resilience4j:
    circuitbreaker:
        configs:
            default:
                slidingWindowSize: 20 # Number of calls which are tracked in the sliding window.
                permittedNumberOfCallsInHalfOpenState: 5 # Number of permitted calls when the CircuitBreaker is half open.
                failureRateThreshold: 50 # Percentage of calls which are allowed to fail.
                waitDurationInOpenState: 15000 # Time which the CircuitBreaker should wait before transitioning from open to half-open.
    timelimiter:
        configs:
            default:
                timeoutDuration: 5s # Timeout duration

#logging:
#    level:
#        io.github.resilience4j: DEBUG